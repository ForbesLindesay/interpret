var fs = require('fs')
var assert = require('assert')
var readdir = require('lsr').sync
var color = require('bash-color')
var evaluate = require('../')

//download tests from http://hg.ecmascript.org/tests/test262/

var debug = false
var timeout = 500;// ms
var start = new Date()

var failureCount = 0
var passCount = 0

var results = ['# Test Results',
               '',
               'This file is generated by running the tests.  We are making progress if red lines become green.',
               '',
               '```diff']

readdir(__dirname + '/compliance', {filter: function (s) { return s.name != 'ignore' }})
  .filter(function (s) { return s.isFile() && /\.js$/.test(s.name) })
  .forEach(function (file) {
    var source = require('fs').readFileSync(file.fullPath, 'utf8')

    var description = /^[ \*]*\@description (.*)$/m.exec(source)
    description = description && description[1]

    var start = new Date()

    try {
      if (/@negative/.test(source)) {
        var errored = false
        try {
          evaluate(source, {
            scope: {
              'console': console,
              '$ERROR': function (msg) {
                throw msg
              },
              runTestCase: function (fn) {
                assert(fn())
              }
            }
          })
        } catch (ex) {
          errored = true
        }
        assert(errored, 'test was meant to fail')
      } else {
        evaluate(source, {
          scope: {
            'console': console,
            '$ERROR': function (msg) {
              throw msg
            },
            runTestCase: function (fn) {
              assert(fn(), 'runTestCase should be given a function which returns true')
            }
          },
          go: function (val, cb, eb) {
            var now = new Date()
            if (now - start > timeout) {
              throw new Error('Test timed out')
            }
            return cb(val)
          }
        })
      }
    } catch (ex) {
      failureCount++
      results.push('- ' + (description ? description + ' (' + file.path + ')' : file.path))
      console.log(color.red('x ' + (description ? description + ' (' + file.path + ')' : file.path)))
      if (debug) {
        throw ex
      }
      return
    }
    passCount++
      results.push('+ ' + (description ? description + ' (' + file.path + ')' : file.path))
    console.log(color.green('âˆš ' + (description || file.path)))
  })


results.push('```')
results.push('')
results.push('## Summary')
results.push('')
results.push(' - failed ' + failureCount)
results.push(' - passed ' + passCount)


console.log()
console.log(color.red(' - failed ' + failureCount))
console.log(color.green(' - passed ' + passCount))
console.log(color.purple(' - duration ' + (new Date() - start) + 'ms'))

fs.writeFileSync(__dirname + '/readme.md', results.join('\n'))